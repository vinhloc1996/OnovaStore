// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OnovaApi.Data;
using System;

namespace OnovaApi.Migrations
{
    [DbContext(typeof(OnovaContext))]
    [Migration("20180425110746_FinalDatabase")]
    partial class FinalDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimID");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimID");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.AnonymousCustomer", b =>
                {
                    b.Property<string>("AnonymousCustomerId")
                        .HasColumnName("AnonymousCustomerID");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("LastUpdateDate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime");

                    b.HasKey("AnonymousCustomerId");

                    b.ToTable("AnonymousCustomer");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.AnonymousCustomerCart", b =>
                {
                    b.Property<string>("AnonymousCustomerCartId")
                        .HasColumnName("AnonymousCustomerCartID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("DisplayPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("LastUpdate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<double?>("ShippingFee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.15))");

                    b.Property<double?>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AnonymousCustomerCartId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AnonymousCustomerCart");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.AnonymousCustomerCartDetail", b =>
                {
                    b.Property<string>("AnonymousCustomerCartId")
                        .HasColumnName("AnonymousCustomerCartID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<double?>("DisplayPrice");

                    b.Property<double?>("Price");

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("Quantity");

                    b.HasKey("AnonymousCustomerCartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AnonymousCustomerCartDetail");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandImage");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("IsHide");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("TotalProduct")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandImage");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryImage");

                    b.Property<bool?>("IsHide");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryID");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("TotalProduct")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryImage");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<string>("FacebookId")
                        .HasColumnName("FacebookID");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.CustomerCart", b =>
                {
                    b.Property<string>("CustomerCartId")
                        .HasColumnName("CustomerCartID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("DisplayPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("LastUpdate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<double?>("ShippingFee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.15))");

                    b.Property<double?>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CustomerCartId");

                    b.HasIndex("PromotionId");

                    b.ToTable("CustomerCart");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.CustomerCartDetail", b =>
                {
                    b.Property<string>("CustomerCartId")
                        .HasColumnName("CustomerCartID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<double?>("DisplayPrice");

                    b.Property<double?>("Price");

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("Quantity");

                    b.HasKey("CustomerCartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("CustomerCartDetail");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.GeneralImage", b =>
                {
                    b.Property<string>("GeneralImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GeneralImageID");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("text");

                    b.Property<string>("StaffId")
                        .HasColumnName("StaffID")
                        .HasMaxLength(450);

                    b.HasKey("GeneralImageId");

                    b.HasIndex("StaffId");

                    b.ToTable("GeneralImage");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CartId")
                        .HasColumnName("CartID")
                        .HasMaxLength(450);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double?>("DisplayPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("EstimateShippingDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<string>("InvoiceTokenId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnName("OrderStatusID");

                    b.Property<string>("OrderTrackingNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PaymentTokenId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<double?>("ShippingFee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.15))");

                    b.Property<double?>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTrackingNumber")
                        .IsUnique()
                        .HasName("UQ__Order__02983D835064F442")
                        .HasFilter("[OrderTrackingNumber] IS NOT NULL");

                    b.HasIndex("PromotionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<double?>("DisplayPrice");

                    b.Property<double?>("Price");

                    b.Property<double?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("Quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderStatusID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CurrentQuantity");

                    b.Property<double>("DisplayPrice");

                    b.Property<bool?>("IsHide");

                    b.Property<int>("MaximumQuantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ProductLongDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductShortDesc")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int?>("ProductStatusId")
                        .HasColumnName("ProductStatusID");

                    b.Property<string>("ProductThumbImage");

                    b.Property<float?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<double>("RealPrice");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<double?>("Weight");

                    b.Property<int?>("WishCounting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ProductThumbImage");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ProductImage", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<string>("GeneralImageId")
                        .HasColumnName("GeneralImageID");

                    b.HasKey("ProductId", "GeneralImageId");

                    b.HasIndex("GeneralImageId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ProductNotification", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<bool>("NotifyStatus");

                    b.HasKey("ProductId", "Email");

                    b.ToTable("ProductNotification");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductStatusID");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("StatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ProductStatusId");

                    b.HasIndex("StatusCode")
                        .IsUnique()
                        .HasName("UQ__ProductS__6A7B44FC27401866")
                        .HasFilter("[StatusCode] IS NOT NULL");

                    b.ToTable("ProductStatus");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PromotionID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("LastUpdateDate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("PercentOff")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PromotionDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("PromotionImage");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PromotionStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TargetApply")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PromotionId");

                    b.HasIndex("PromotionCode")
                        .IsUnique()
                        .HasName("UQ__Promotio__A617E4B6943E9D2E");

                    b.HasIndex("PromotionImage");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.PromotionBrand", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID");

                    b.HasKey("PromotionId");

                    b.HasIndex("BrandId");

                    b.ToTable("PromotionBrand");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.PromotionCategory", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnName("PromotionID");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.HasKey("PromotionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PromotionCategory");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ShippingInfo", b =>
                {
                    b.Property<int>("ShippingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShippingInfoID");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(450);

                    b.Property<string>("FullName")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ShippingInfoId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShippingInfo");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnName("StaffID");

                    b.Property<string>("AddBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double>("Salary");

                    b.Property<int?>("UserStatusId")
                        .HasColumnName("UserStatusID");

                    b.HasKey("StaffId");

                    b.HasIndex("AddBy");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("OnovaApi.Models.IdentityModels.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OnovaApi.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool?>("Gender");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Picture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.AnonymousCustomerCart", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.AnonymousCustomer", "AnonymousCustomerCartNavigation")
                        .WithOne("AnonymousCustomerCart")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.AnonymousCustomerCart", "AnonymousCustomerCartId")
                        .HasConstraintName("FK_AnonymousCustomerCart_AnonymousCustomerCartID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("AnonymousCustomerCart")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_AnonymousCustomerCart_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.AnonymousCustomerCartDetail", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.AnonymousCustomerCart", "AnonymousCustomerCart")
                        .WithMany("AnonymousCustomerCartDetail")
                        .HasForeignKey("AnonymousCustomerCartId")
                        .HasConstraintName("FK_AnonymousCustomerCartDetail_CartID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Product", "Product")
                        .WithMany("AnonymousCustomerCartDetail")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_AnonymousCustomerCartDetail_ProductID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("AnonymousCustomerCartDetail")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_AnonymousCustomerCartDetail_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Brand", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.GeneralImage", "BrandImageNavigation")
                        .WithMany("Brand")
                        .HasForeignKey("BrandImage")
                        .HasConstraintName("FK_Brand_GeneralImageID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Category", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.GeneralImage", "CategoryImageNavigation")
                        .WithMany("Category")
                        .HasForeignKey("CategoryImage")
                        .HasConstraintName("FK_Category_GeneralImageID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_CategoryID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Customer", b =>
                {
                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.Customer", "CustomerId")
                        .HasConstraintName("FK_Customer_CustomerID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.CustomerCart", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Customer", "CustomerCartNavigation")
                        .WithOne("CustomerCart")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.CustomerCart", "CustomerCartId")
                        .HasConstraintName("FK_CustomerCart_CustomerID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("CustomerCart")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_CustomerCart_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.CustomerCartDetail", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.CustomerCart", "CustomerCart")
                        .WithMany("CustomerCartDetail")
                        .HasForeignKey("CustomerCartId")
                        .HasConstraintName("FK_CustomerCartDetail_CartID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Product", "Product")
                        .WithMany("CustomerCartDetail")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CustomerCartDetail_ProductID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("CustomerCartDetail")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_CustomerCartDetail_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.GeneralImage", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Staff", "Staff")
                        .WithMany("GeneralImage")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_GeneralImage_StaffID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Order", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_Order_OrderStatusID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("Order")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_Order_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.OrderDetail", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_OrderID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetail_ProductID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithMany("OrderDetail")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_OrderDetail_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Product", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_BrandID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_CategoryID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.ProductStatus", "ProductStatus")
                        .WithMany("Product")
                        .HasForeignKey("ProductStatusId")
                        .HasConstraintName("FK_Product_ProductStatusID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.GeneralImage", "ProductThumbImageNavigation")
                        .WithMany("Product")
                        .HasForeignKey("ProductThumbImage")
                        .HasConstraintName("FK_Product_ProductThumbImage");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ProductImage", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.GeneralImage", "GeneralImage")
                        .WithMany("ProductImage")
                        .HasForeignKey("GeneralImageId")
                        .HasConstraintName("FK_ProductImage_GeneralImageID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_ProductID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ProductNotification", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Product", "Product")
                        .WithMany("ProductNotification")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductNotification_ProductID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Promotion", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.GeneralImage", "PromotionImageNavigation")
                        .WithMany("Promotion")
                        .HasForeignKey("PromotionImage")
                        .HasConstraintName("FK_Promotion_GeneralImageID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.PromotionBrand", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Brand", "Brand")
                        .WithMany("PromotionBrand")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_PromotionBrand_BrandID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithOne("PromotionBrand")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.PromotionBrand", "PromotionId")
                        .HasConstraintName("FK_PromotionBrand_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.PromotionCategory", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Category", "Category")
                        .WithMany("PromotionCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PromotionCategory_CategoryID");

                    b.HasOne("OnovaApi.Models.DatabaseModels.Promotion", "Promotion")
                        .WithOne("PromotionCategory")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.PromotionCategory", "PromotionId")
                        .HasConstraintName("FK_PromotionCategory_PromotionID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.ShippingInfo", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Customer", "Customer")
                        .WithMany("ShippingInfo")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ShippingInfo_CustomerID");
                });

            modelBuilder.Entity("OnovaApi.Models.DatabaseModels.Staff", b =>
                {
                    b.HasOne("OnovaApi.Models.DatabaseModels.Staff", "AddByStaffManager")
                        .WithMany("InverseAddByStaffManager")
                        .HasForeignKey("AddBy")
                        .HasConstraintName("FK_Staff_StaffManagerID");

                    b.HasOne("OnovaApi.Models.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Staff")
                        .HasForeignKey("OnovaApi.Models.DatabaseModels.Staff", "StaffId")
                        .HasConstraintName("FK_Staff_StaffID");
                });
#pragma warning restore 612, 618
        }
    }
}
